package com.ndb.auction.contracts;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class NDBcoinV4 extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b50614a83806100206000396000f3fe608060405260043610620003cf5760003560e01c806388e765ff11620001f7578063d04cbfb41162000117578063f0b37c0411620000ad578063f84ba65d1162000078578063f84ba65d1462000b4f578063f887ea401462000b74578063f8c8765e1462000b96578063fe9fbb801462000bbb57600080fd5b8063f0b37c041462000abb578063f1f3bca31462000ae0578063f5cfec0a1462000b05578063f708a64f1462000b2a57600080fd5b8063dd62ed3e11620000ee578063dd62ed3e1462000a04578063df20fd491462000a4e578063e91f214e1462000a73578063e96fada21462000a9957600080fd5b8063d04cbfb414620009a2578063d7c0103214620009c7578063d806d12f14620009ec57600080fd5b8063a9059cbb116200018d578063bf56b3711162000164578063bf56b371146200092e578063c6d2577d1462000946578063ca33e64c146200095e578063cd82fccb146200098057600080fd5b8063a9059cbb14620008cc578063b210b06d14620008f1578063b6a5d7de146200090957600080fd5b806395d89b4111620001ce57806395d89b41146200046b5780639d1944f51462000863578063a51af4c51462000888578063a8aa1b3114620008aa57600080fd5b806388e765ff1462000809578063893d20e814620008215780638dd95002146200084157600080fd5b8063313ce56711620002ef57806366d602ae1162000285578063715018a61162000250578063715018a6146200078657806379ba5097146200079e5780637d1db4a514620007b657806384b1d1ef14620007ce57600080fd5b806366d602ae14620006e45780636b3b27db14620006fc5780636ddd1713146200073057806370a08231146200074c57600080fd5b8063571ac8b011620002c6578063571ac8b014620006505780635c85974f146200067557806362ea2e8d146200069a578063658d4b7f14620006bf57600080fd5b8063313ce56714620005f15780633bb8a8d4146200060f57806352c043c1146200062b57600080fd5b8063201e7991116200036557806323b872dd116200033c57806323b872dd146200055c5780632b112e4914620005815780632d48e89614620005995780632f54bf6e14620005be57600080fd5b8063201e799114620004ed57806321b2d6c814620005125780632375ce40146200053757600080fd5b806304a66b4811620003a657806304a66b48146200044657806306fdde03146200046b578063095ea7b314620004a057806318160ddd14620004d657600080fd5b806301339c2114620003dc5780630445b66714620003f6578063048c7baf146200042157600080fd5b36620003d757005b600080fd5b348015620003e957600080fd5b50620003f462000be0565b005b3480156200040357600080fd5b506200040e602e5481565b6040519081526020015b60405180910390f35b3480156200042e57600080fd5b50620003f46200044036600462003557565b62000caa565b3480156200045357600080fd5b50620003f46200046536600462003593565b62000d4a565b3480156200047857600080fd5b50604080518082018252600381526227222160e91b60208201529051620004189190620035cf565b348015620004ad57600080fd5b50620004c5620004bf36600462003640565b62000e5c565b604051901515815260200162000418565b348015620004e357600080fd5b506005546200040e565b348015620004fa57600080fd5b50620003f46200050c3660046200366f565b62000eca565b3480156200051f57600080fd5b50620003f46200053136600462003692565b62000f99565b3480156200054457600080fd5b50620003f462000556366004620036cc565b6200101e565b3480156200056957600080fd5b50620004c56200057b366004620036f9565b620010fe565b3480156200058e57600080fd5b506200040e6200122e565b348015620005a657600080fd5b50620003f4620005b83660046200366f565b620012a3565b348015620005cb57600080fd5b50620004c5620005dd3660046200373f565b6000546001600160a01b0391821691161490565b348015620005fe57600080fd5b50604051600c815260200162000418565b3480156200061c57600080fd5b50602354620004c59060ff1681565b3480156200063857600080fd5b50620003f46200064a3660046200373f565b62001338565b3480156200065d57600080fd5b50620004c56200066f3660046200373f565b620013af565b3480156200068257600080fd5b50620003f4620006943660046200375f565b620013bf565b348015620006a757600080fd5b50620003f4620006b93660046200373f565b62001488565b348015620006cc57600080fd5b50620003f4620006de36600462003692565b6200150f565b348015620006f157600080fd5b506200040e601e5481565b3480156200070957600080fd5b50620004c56200071b3660046200373f565b60316020526000908152604090205460ff1681565b3480156200073d57600080fd5b50602d54620004c59060ff1681565b3480156200075957600080fd5b506200040e6200076b3660046200373f565b6001600160a01b031660009081526007602052604090205490565b3480156200079357600080fd5b50620003f462001591565b348015620007ab57600080fd5b50620003f462001632565b348015620007c357600080fd5b506200040e60065481565b348015620007db57600080fd5b50601654620007f0906001600160a01b031681565b6040516001600160a01b03909116815260200162000418565b3480156200081657600080fd5b506200040e601d5481565b3480156200082e57600080fd5b506000546001600160a01b0316620007f0565b3480156200084e57600080fd5b50600454620007f0906001600160a01b031681565b3480156200087057600080fd5b50620003f4620008823660046200375f565b62001743565b3480156200089557600080fd5b50602b54620007f0906001600160a01b031681565b348015620008b757600080fd5b50601a54620007f0906001600160a01b031681565b348015620008d957600080fd5b50620004c5620008eb36600462003640565b620017e5565b348015620008fe57600080fd5b50620003f462001859565b3480156200091657600080fd5b50620003f4620009283660046200373f565b620018bb565b3480156200093b57600080fd5b506200040e601b5481565b3480156200095357600080fd5b506200040e601c5481565b3480156200096b57600080fd5b50601454620007f0906001600160a01b031681565b3480156200098d57600080fd5b50601354620007f0906001600160a01b031681565b348015620009af57600080fd5b50620003f4620009c136600462003692565b62001940565b348015620009d457600080fd5b50620003f4620009e636600462003779565b620019c2565b348015620009f957600080fd5b506200040e62001a69565b34801562000a1157600080fd5b506200040e62000a23366004620037cb565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205490565b34801562000a5b57600080fd5b50620003f462000a6d36600462003809565b62001b53565b34801562000a8057600080fd5b506200040e6fffffffffffffffffffffffffffffffff81565b34801562000aa657600080fd5b50601554620007f0906001600160a01b031681565b34801562000ac857600080fd5b50620003f462000ada3660046200373f565b62001bd0565b34801562000aed57600080fd5b506200040e62000aff36600462003828565b62001c4f565b34801562000b1257600080fd5b50620003f462000b2436600462003846565b62001c92565b34801562000b3757600080fd5b50620003f462000b4936600462003692565b62001d44565b34801562000b5c57600080fd5b50620003f462000b6e36600462003692565b62001f20565b34801562000b8157600080fd5b50601954620007f0906001600160a01b031681565b34801562000ba357600080fd5b50620003f462000bb53660046200386c565b62001fa2565b34801562000bc857600080fd5b50620004c562000bda3660046200373f565b6200269c565b62000beb336200269c565b62000c135760405162461bcd60e51b815260040162000c0a90620038d1565b60405180910390fd5b601b541562000c5c5760405162461bcd60e51b8152602060048201526014602482015273416c7265616479206c61756e6368656420626f6960601b604482015260640162000c0a565b43601b81905542601c8190556040517fa4eda92a9703eeccb36fbed43c5cfce0e180464bf695e806d3bd0e439743fd569262000ca092908252602082015260400190565b60405180910390a1565b62000cb5336200269c565b62000cd45760405162461bcd60e51b815260040162000c0a90620038d1565b6023805460ff191685151590811790915560258490556000602655602783905560288290554360295560408051918252602082018590528101839052606081018290527f1b8ced33f4b3c14da2a89db9167ac597066508057af0faf70ff9a0bd55bce8f39060800160405180910390a150505050565b62000d55336200269c565b62000d745760405162461bcd60e51b815260040162000c0a90620038d1565b600d859055600e849055600f839055601082905562000da28262000d9b85818989620026ba565b90620026ba565b601155601281905562000db76004826200390c565b6011541062000dfd5760405162461bcd60e51b8152602060048201526011602482015270746f74616c20666565206578636565647360781b604482015260640162000c0a565b600d54600e54600f54601254604080519485526020850193909352918301526060820184905260808201527f881c278b86ef48391462a184ea0f2a579fec4c752524d2982eb0e2c9a956b7a39060a00160405180910390a15050505050565b3360008181526008602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259062000eb89086815260200190565b60405180910390a35060015b92915050565b62000ed5336200269c565b62000ef45760405162461bcd60e51b815260040162000c0a90620038d1565b62000f01816002620026c8565b821062000f515760405162461bcd60e51b815260206004820152601760248201527f746172676574206973206f7665726c6971756966696564000000000000000000604482015260640162000c0a565b6017829055601881905560408051838152602081018390527f61b037fbf40888c3d344a3dfa6986a7d511feda40cac15b93162e3e21713aed691015b60405180910390a15050565b6000546001600160a01b0316331462000fc65760405162461bcd60e51b815260040162000c0a906200392f565b6001600160a01b03821660009081526030602052604090819020805460ff1916831515179055517fe1bc86e6732352af67f4832aeaea744c68976f7854b164eabb70c8ad667852499062000f8d90849084906200394f565b62001029336200269c565b620010485760405162461bcd60e51b815260040162000c0a90620038d1565b60026200105683856200390c565b111580156200106457508183115b620010aa5760405162461bcd60e51b81526020600482015260156024820152746e756d657261746f72206973206f766572666c6f7760581b604482015260640162000c0a565b601f839055602082815560228290556040805185815291820184905281018290527fc8716d253f9ba4c44e0c96c044c56034c170c5d7a6f64522295a2c37119d94d0906060015b60405180910390a1505050565b60006200110c8484620026d6565b6005546001600160a01b038516600090815260086020908152604080832033845290915290205414620011bc576040805180820182526016815275496e73756666696369656e7420416c6c6f77616e636560501b6020808301919091526001600160a01b03871660009081526008825283812033825290915291909120546200119791849062002792565b6001600160a01b03851660009081526008602090815260408083203384529091529020555b60065482118015620011de5750336000908152600a602052604090205460ff16155b156200121657336000818152600c60205260408120805460ff191660011790556200120e919086908690620027c1565b905062001227565b6200122433858585620027c1565b90505b9392505050565b60076020527f6d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6df5461dead60009081527fb0c2646e02af70b79e3fe9277b98373379f54150e4e26b2b5650139f7a75a65d5460055491926200129e92909162001297919062002db9565b9062002db9565b905090565b620012ae336200269c565b620012cd5760405162461bcd60e51b815260040162000c0a90620038d1565b602a546040516316a4744b60e11b815260048101849052602481018390526001600160a01b0390911690632d48e89690604401600060405180830381600087803b1580156200131b57600080fd5b505af115801562001330573d6000803e3d6000fd5b505050505050565b6000546001600160a01b03163314620013655760405162461bcd60e51b815260040162000c0a906200392f565b600280546001600160a01b0319166001600160a01b0383169081179091556040517f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce2290600090a250565b600062000ec48260055462000e5c565b620013ca336200269c565b620013e95760405162461bcd60e51b815260040162000c0a90620038d1565b6103e8600554620013fb91906200390c565b8110156200144c5760405162461bcd60e51b815260206004820181905260248201527f7472616e73616374696f6e20616d6f756e742065786365656473206c696d6974604482015260640162000c0a565b60068190556040518181527f0908917ea7a6e134d05135241f8d5a4eaa81dd074e9dd7f36cca8b5ea003bde1906020015b60405180910390a150565b6000546001600160a01b03163314620014b55760405162461bcd60e51b815260040162000c0a906200392f565b602f8054610100600160a81b0319166101006001600160a01b038481168202929092179283905560405192041681527f0e9b662e0415f9ed1393a8732c6bb685833c0b4ceab5c775a6a8967fa148697c906020016200147d565b6200151a336200269c565b620015395760405162461bcd60e51b815260040162000c0a90620038d1565b6001600160a01b03821660009081526009602052604090819020805460ff1916831515179055517f1b92447bfc74f86a82293c184341926a5888220bc498dde33efabf7c3d796d699062000f8d90849084906200394f565b6000546001600160a01b03163314620015be5760405162461bcd60e51b815260040162000c0a906200392f565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b03168152600160205260408120805460ff1916905580546001600160a01b0319908116909155600280549091169055565b6002546001600160a01b03163314620016c55760405162461bcd60e51b815260206004820152604860248201527f596f75206d757374206265206e6f6d696e6174656420617320706f74656e746960448201527f616c206f776e6572206265666f726520796f752063616e20616363657074206f6064820152670776e6572736869760c41b608482015260a40162000c0a565b600254600080546040516001600160a01b0393841693909116917fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c91a3600080546001600160a01b039081168252600160205260408220805460ff191690556002805483549281166001600160a01b03199384161790935591169055565b6200174e336200269c565b6200176d5760405162461bcd60e51b815260040162000c0a90620038d1565b620b71b08110620017af5760405162461bcd60e51b815260206004820152600b60248201526a676173206578636565647360a81b604482015260640162000c0a565b602c8190556040518181527f0ac490767124c3ed3e591404033136400e1fcd55d8be80510b0407f792c68b09906020016200147d565b6000620017f33384620026d6565b60065482118015620018155750336000908152600a602052604090205460ff16155b156200184a57336000818152600c60205260408120805460ff1916600117905562001842918582620027c1565b905062000ec4565b620012276000338585620027c1565b62001864336200269c565b620018835760405162461bcd60e51b815260040162000c0a90620038d1565b600060218190556040519081527fcca13ebd698a87c405f046400a38f9b8b06afccf3ad995b1f694cdd8aff870a49060200162000ca0565b6000546001600160a01b03163314620018e85760405162461bcd60e51b815260040162000c0a906200392f565b6001600160a01b038116600090815260016020819052604091829020805460ff19168217905590517fcea19d7e74d2901bed6a09d188b76bf13520e4d6361466d6ba67872151fd09ab916200147d918491906200394f565b6200194b336200269c565b6200196a5760405162461bcd60e51b815260040162000c0a90620038d1565b6001600160a01b0382166000908152600c602052604090819020805460ff1916831515179055517f1b26f3a819787901b4864d032445a54e683770463fa429004eb7aab38eec8e6a9062000f8d90849084906200394f565b620019cd336200269c565b620019ec5760405162461bcd60e51b815260040162000c0a90620038d1565b601480546001600160a01b038581166001600160a01b0319928316811790935560158054868316908416811790915560168054928616929093168217909255604080519384526020840192909252908201527fb923dcdfa226a9163e9324bacc07634c44fc26e1268f8341bc0989d83f4794b890606001620010f1565b600042601c546201518062001a7f91906200396a565b111562001aad576200129e60125462001aa6614650601154620026c890919063ffffffff16565b9062002dc7565b4262001ac7602254602154620026ba90919063ffffffff16565b111562001b4c57600062001aee4262001297602254602154620026ba90919063ffffffff16565b9050600062001b196011546200129760205462001aa6601f54601154620026c890919063ffffffff16565b905062001b4562001b3b60225462001aa68585620026c890919063ffffffff16565b60115490620026ba565b9250505090565b5060115490565b62001b5e336200269c565b62001b7d5760405162461bcd60e51b815260040162000c0a90620038d1565b602d805460ff1916831515908117909155602e8290556040805160ff90921615158252602082018390527f87648e954f6c9d5f5f7ddeb39f95ca8f7d2c14cbb2f190d5250f9b6eb04dd934910162000f8d565b6000546001600160a01b0316331462001bfd5760405162461bcd60e51b815260040162000c0a906200392f565b6001600160a01b038116600090815260016020526040808220805460ff19169055517fcea19d7e74d2901bed6a09d188b76bf13520e4d6361466d6ba67872151fd09ab916200147d918491906200394f565b600043601b54600162001c6391906200396a565b1062001c795760125462000ec490600162002db9565b811562001c8a5762000ec462001a69565b505060115490565b62001c9d336200269c565b62001cbc5760405162461bcd60e51b815260040162000c0a90620038d1565b62001cca8261dead62002dd5565b801562001d0c57426021556022546040519081527f39d2389ec5c1fa77b2c0d374bc61b6d7bd97ccba280fcdeb4e9c7644898d7c3a9060200160405180910390a15b6040805183815282151560208201527f64b64e24e95ff3b681d7e6f5a5ce4d5fa557bc2f47543be9645e18ff3c68963a910162000f8d565b62001d4f336200269c565b62001d6e5760405162461bcd60e51b815260040162000c0a90620038d1565b6001600160a01b038216301480159062001d965750601a546001600160a01b03838116911614155b62001dd85760405162461bcd60e51b81526020600482015260116024820152701a1bdb19195c881a5cc81a5b9d985b1a59607a1b604482015260640162000c0a565b6001600160a01b0382166000908152600b60205260409020805460ff1916821580159190911790915562001e7457602a54604051630a5b654b60e11b81526001600160a01b03848116600483015260006024830152909116906314b6ca9690604401600060405180830381600087803b15801562001e5557600080fd5b505af115801562001e6a573d6000803e3d6000fd5b5050505062001eed565b602a546001600160a01b0383811660008181526007602052604090819020549051630a5b654b60e11b8152600481019290925260248201529116906314b6ca9690604401600060405180830381600087803b15801562001ed357600080fd5b505af115801562001ee8573d6000803e3d6000fd5b505050505b7fad3666dd545175260bd4a82a50e0b189b968d227adfefd0df46a3e2fa2d5eafe828260405162000f8d9291906200394f565b62001f2b336200269c565b62001f4a5760405162461bcd60e51b815260040162000c0a90620038d1565b6001600160a01b0382166000908152600a602052604090819020805460ff1916831515179055517f6824b1d87573c276dab7cd55e81d1a9dda557f5deb51bad3c38832e5d1333fba9062000f8d90849084906200394f565b6001600160a01b03841662001ffa5760405162461bcd60e51b815260206004820152601960248201527f44455820526f75746572206164647265737320656d7074792e00000000000000604482015260640162000c0a565b6001600160a01b038316620020525760405162461bcd60e51b815260206004820152601860248201527f4d61726b6574696e67206164647265737320656d7074792e0000000000000000604482015260640162000c0a565b6001600160a01b038216620020a35760405162461bcd60e51b8152602060048201526016602482015275213abcb130b1b59030b2323932b9b99032b6b83a3c9760511b604482015260640162000c0a565b6001600160a01b038116620020f15760405162461bcd60e51b81526020600482015260136024820152722bb0ba3a1030b2323932b9b99032b6b83a3c9760691b604482015260640162000c0a565b60148054336001600160a01b0319918216179091556015805482166001600160a01b0386811691909117909155601680548316858316179055601380548316848316179055600080549091168152603060205260409020805460ff191660011790556003805473e9e7cea3dedca5984780bafc599bd69add087d56921691909117905562002182600c600a62003a82565b620021939064e8d4a5100062003a93565b6005819055620021a69061032062002dc7565b600655600554620021c390620186a09062001aa690607d620026c8565b601e55600554620021e090620186a09062001aa690607d620026c8565b601d5560c8600d8190556096600e8190556000600f556010556101f4601155612710601255601960175560646018819055601f919091556020556107086022556207a120602c55602d805460ff191660011790556005546200224590614e2062002dc7565b602e55600080546001600160a01b0319908116339081178355825260016020818152604093849020805460ff1916909217909155601980546001600160a01b03891693168317905582516315ab88c960e31b81529251919263ad5c464892600480830193928290030181865afa158015620022c4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620022ea919062003ab5565b600480546001600160a01b0319166001600160a01b039283161781556019546040805163c45a015560e01b81529051919093169263c45a015592818101926020929091908290030181865afa15801562002348573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200236e919062003ab5565b600480546040516364e329cb60e11b81526001600160a01b0391821692810192909252306024830152919091169063c9c65396906044016020604051808303816000875af1158015620023c5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620023eb919062003ab5565b601a80546001600160a01b0319166001600160a01b0392831617815530600090815260086020908152604080832060195486168452909152808220600019908190559254909316815282902055518490620024469062003533565b6001600160a01b039091168152602001604051809103906000f08015801562002473573d6000803e3d6000fd5b50602a80546001600160a01b039283166001600160a01b03199182168117909255602b80549091169091179055336000818152600960209081526040808320805460ff19908116600190811790925560138054881686528386208054831684179055601a8054891687528487208054841685179055308088528588208054851686179055888852600a875285882080548516861790559154891687528487208054841685179055549097168552600b8452828520805482168317905595845281842080548716821790557f44433eeeda1d04bdae79f62169cdb2ab0a6af287fa15706d3fafdbac5fac34158054871682179055938352602490915290208054909216179055620025868460001962000e5c565b50601a54620025a1906001600160a01b031660001962000e5c565b50620025c76041620025c0606460055462002dc790919063ffffffff16565b90620026c8565b33600090815260076020526040902055600554620025ef90602390620025c090606462002dc7565b6013546001600160a01b031660009081526007602052604081209190915560055433919060008051602062004a2e833981519152906200263990604190620025c090606462002dc7565b60405190815260200160405180910390a36013546005546001600160a01b039091169060009060008051602062004a2e833981519152906200268590602390620025c090606462002dc7565b60405190815260200160405180910390a350505050565b6001600160a01b031660009081526001602052604090205460ff1690565b60006200122782846200396a565b600062001227828462003a93565b6001600160a01b0382166000908152600c602052604090205460ff1615620027325760405162461bcd60e51b815260206004820152600e60248201526d105353109b1858dadb1a5cdd195960921b604482015260640162000c0a565b6001600160a01b0381166000908152600c602052604090205460ff16156200278e5760405162461bcd60e51b815260206004820152600e60248201526d105353109b1858dadb1a5cdd195960921b604482015260640162000c0a565b5050565b60008184841115620027b95760405162461bcd60e51b815260040162000c0a9190620035cf565b505050900390565b6000806001600160a01b03861615620027db5785620027dd565b845b9050620027eb858462002f4d565b601a546001600160a01b03908116908616036200284a57601d548311156200284a5760405162461bcd60e51b8152602060048201526011602482015270109d5e48195e18d959591cc81b1a5b5a5d607a1b604482015260640162000c0a565b601a546001600160a01b0390811690851603620028aa57601e54831115620028aa5760405162461bcd60e51b815260206004820152601260248201527114d95b1b08195e18d959591cc81b1a5b5a5d60721b604482015260640162000c0a565b620028b462002fb9565b15620028c457620028c46200300b565b620028ce620033dd565b15620028de57620028de6200343e565b6040805180820182526014815273496e73756666696369656e742042616c616e636560601b6020808301919091526001600160a01b0388166000908152600790915291909120546200293291859062002792565b6001600160a01b03861660009081526007602052604081209190915562002972826001600160a01b031660009081526009602052604090205460ff161590565b6200297e57836200298b565b6200298b8686866200347f565b6001600160a01b03871660009081526030602052604090205490915060ff16151560010362002d3b57602f54604051634a9fefc760e01b81526001600160a01b0387811660048301526000928392839261010090920490911690634a9fefc790602401606060405180830381865afa15801562002a0c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002a32919062003ad5565b919450925060ff1690506001600160a01b0383161580159062002a555750600082115b1562002d3757600062002a7d61271062001aa662002a7586606462003a93565b8890620026c8565b905062002ae78160405180604001604052806014815260200173496e73756666696369656e742042616c616e636560601b815250600760008e6001600160a01b03166001600160a01b0316815260200190815260200160002054620027929092919063ffffffff16565b6001600160a01b03808c16600090815260076020526040808220939093559086168152205462002b189082620026ba565b6001600160a01b038516600090815260076020526040902055811580159062002b5a57506001600160a01b03891660009081526031602052604090205460ff16155b1562002c8257600062002b8261271062001aa662002b7a86606462003a93565b8990620026c8565b905062002bec8160405180604001604052806014815260200173496e73756666696369656e742042616c616e636560601b815250600760008f6001600160a01b03166001600160a01b0316815260200190815260200160002054620027929092919063ffffffff16565b6001600160a01b03808d16600090815260076020818152604080842095909555928e16825260318352838220805460ff19166001179055909152205462002c349082620026ba565b6001600160a01b03808c1660008181526007602052604090819020939093559151908d169060008051602062004a2e8339815191529062002c789085815260200190565b60405180910390a3505b602f54604051639691b12d60e01b81526001600160a01b0386811660048301528b811660248301526044820184905261010090920490911690639691b12d90606401600060405180830381600087803b15801562002cdf57600080fd5b505af115801562002cf4573d6000803e3d6000fd5b50505050836001600160a01b03168a6001600160a01b031660008051602062004a2e8339815191528360405162002d2d91815260200190565b60405180910390a3505b5050505b6001600160a01b03851660009081526007602052604090205462002d609082620026ba565b6001600160a01b03808716600081815260076020526040908190209390935591519088169060008051602062004a2e8339815191529062002da49085815260200190565b60405180910390a35060019695505050505050565b600062001227828462003b17565b60006200122782846200390c565b602f805460ff19166001179055604080516002808252606082018352600092602083019080368337505060045482519293506001600160a01b03169183915060009062002e265762002e2662003b31565b60200260200101906001600160a01b031690816001600160a01b031681525050308160018151811062002e5d5762002e5d62003b31565b60200260200101906001600160a01b031690816001600160a01b0316815250506000471162002ecf5760405162461bcd60e51b815260206004820152601860248201527f494e53554646494349454e545f57424e425f414d4f554e540000000000000000604482015260640162000c0a565b60195460405163b6f9de9560e01b81526001600160a01b039091169063b6f9de9590859062002f0a9060009086908890429060040162003b8d565b6000604051808303818588803b15801562002f2457600080fd5b505af115801562002f39573d6000803e3d6000fd5b5050602f805460ff19169055505050505050565b6006548111158062002f7757506001600160a01b0382166000908152600a602052604090205460ff165b6200278e5760405162461bcd60e51b8152602060048201526011602482015270151608131a5b5a5d08115e18d959591959607a1b604482015260640162000c0a565b601a546000906001600160a01b0316331480159062002fdb5750602f5460ff16155b801562002fea5750602d5460ff165b80156200129e575050602e5430600090815260076020526040902054101590565b602f805460ff19166001179055600d54601154602e546000916200303a9160029162001aa691829087620026c8565b905060006200305582602e5462002db990919063ffffffff16565b6040805160028082526060820183529293506000929091602083019080368337019050509050308160008151811062003092576200309262003b31565b6001600160a01b039283166020918202929092010152600454825191169082906001908110620030c657620030c662003b31565b6001600160a01b03928316602091820292909201015260195460405163791ac94760e01b81524792919091169063791ac947906200311290869060009087903090429060040162003bc4565b600060405180830381600087803b1580156200312d57600080fd5b505af115801562003142573d6000803e3d6000fd5b5050505060006200315d824762002db990919063ffffffff16565b905060006200317c6200317288600262002dc7565b6011549062002db9565b9050600062003194600262001aa68481878d620026c8565b90506000620031b48362001aa660105487620026c890919063ffffffff16565b90506000620031d48462001aa6600e5488620026c890919063ffffffff16565b600f549091501562003267576000620031fe8562001aa6600f5489620026c890919063ffffffff16565b9050602a60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156200325157600080fd5b505af19350505050801562003264575060015b50505b6015546040516001600160a01b039091169083156108fc029084906000818181858888f19350505050158015620032a2573d6000803e3d6000fd5b5060235460ff16620032eb576016546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015620032e9573d6000803e3d6000fd5b505b8815620033c75760195460145460405163f305d71960e01b8152306004820152602481018c905260006044820181905260648201526001600160a01b0391821660848201524260a482015291169063f305d71990859060c40160606040518083038185885af115801562003363573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906200338a919062003c02565b505060408051858152602081018c90527f424db2872186fa7e7afa7a5e902ed3b49a2ef19c2f5431e672462495dd6b450692500160405180910390a15b5050602f805460ff191690555050505050505050565b601a546000906001600160a01b03163314801590620033ff5750602f5460ff16155b80156200340e575060235460ff165b80156200342c5750436028546029546200342991906200396a565b11155b80156200129e57505060275447101590565b6200344e60275461dead62002dd5565b436029556027546026546200346391620026ba565b602681905560255410156200347d576023805460ff191690555b565b601254601a546000918291620034b6919062001aa690620034ae906001600160a01b0389811691161462001c4f565b8690620026c8565b30600090815260076020526040902054909150620034d59082620026ba565b30600081815260076020526040908190209290925590516001600160a01b0387169060008051602062004a2e83398151915290620035169085815260200190565b60405180910390a36200352a838262002db9565b95945050505050565b610dfc8062003c3283390190565b803580151581146200355257600080fd5b919050565b600080600080608085870312156200356e57600080fd5b620035798562003541565b966020860135965060408601359560600135945092505050565b600080600080600060a08688031215620035ac57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b600060208083528351808285015260005b81811015620035fe57858101830151858201604001528201620035e0565b8181111562003611576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b03811681146200363d57600080fd5b50565b600080604083850312156200365457600080fd5b8235620036618162003627565b946020939093013593505050565b600080604083850312156200368357600080fd5b50508035926020909101359150565b60008060408385031215620036a657600080fd5b8235620036b38162003627565b9150620036c36020840162003541565b90509250929050565b600080600060608486031215620036e257600080fd5b505081359360208301359350604090920135919050565b6000806000606084860312156200370f57600080fd5b83356200371c8162003627565b925060208401356200372e8162003627565b929592945050506040919091013590565b6000602082840312156200375257600080fd5b8135620012278162003627565b6000602082840312156200377257600080fd5b5035919050565b6000806000606084860312156200378f57600080fd5b83356200379c8162003627565b92506020840135620037ae8162003627565b91506040840135620037c08162003627565b809150509250925092565b60008060408385031215620037df57600080fd5b8235620037ec8162003627565b91506020830135620037fe8162003627565b809150509250929050565b600080604083850312156200381d57600080fd5b620036618362003541565b6000602082840312156200383b57600080fd5b620012278262003541565b600080604083850312156200385a57600080fd5b82359150620036c36020840162003541565b600080600080608085870312156200388357600080fd5b8435620038908162003627565b93506020850135620038a28162003627565b92506040850135620038b48162003627565b91506060850135620038c68162003627565b939692955090935050565b6020808252600b908201526a085055551213d49256915160aa1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000826200392a57634e487b7160e01b600052601260045260246000fd5b500490565b60208082526006908201526510a7aba722a960d11b604082015260600190565b6001600160a01b039290921682521515602082015260400190565b60008219821115620039805762003980620038f6565b500190565b600181815b80851115620039c6578160001904821115620039aa57620039aa620038f6565b80851615620039b857918102915b93841c93908002906200398a565b509250929050565b600082620039df5750600162000ec4565b81620039ee5750600062000ec4565b816001811462003a07576002811462003a125762003a32565b600191505062000ec4565b60ff84111562003a265762003a26620038f6565b50506001821b62000ec4565b5060208310610133831016604e8410600b841016171562003a57575081810a62000ec4565b62003a63838362003985565b806000190482111562003a7a5762003a7a620038f6565b029392505050565b60006200122760ff841683620039ce565b600081600019048311821515161562003ab05762003ab0620038f6565b500290565b60006020828403121562003ac857600080fd5b8151620012278162003627565b60008060006060848603121562003aeb57600080fd5b835162003af88162003627565b60208501516040860151919450925060ff81168114620037c057600080fd5b60008282101562003b2c5762003b2c620038f6565b500390565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b8381101562003b825781516001600160a01b03168752958201959082019060010162003b5b565b509495945050505050565b84815260806020820152600062003ba8608083018662003b47565b6001600160a01b03949094166040830152506060015292915050565b85815284602082015260a06040820152600062003be560a083018662003b47565b6001600160a01b0394909416606083015250608001529392505050565b60008060006060848603121562003c1857600080fd5b835192506020840151915060408401519050925092509256fe6080604052610e10600a55670de0b6b3a7640000600b5534801561002257600080fd5b50604051610dfc380380610dfc8339810160408190526100419161009b565b6001600160a01b038116610069577310ed43c718714eb63d5aa57b78b54704e256024e61006b565b805b600180546001600160a01b03929092166001600160a01b03199283161790556000805490911633179055506100cb565b6000602082840312156100ad57600080fd5b81516001600160a01b03811681146100c457600080fd5b9392505050565b610d22806100da6000396000f3fe6080604052600436106100c25760003560e01c8063ce7c2ac21161007f578063efca2eed11610059578063efca2eed146101f3578063f0fc6bca14610209578063ffb2c4791461021e578063ffd49c841461023e57600080fd5b8063ce7c2ac21461017e578063d0e30db0146101d5578063e2d2e219146101dd57600080fd5b806314b6ca96146100c757806328fd3198146100e95780632d48e8961461011c5780633a98ef391461013c5780634fab0ae814610152578063997664d714610168575b600080fd5b3480156100d357600080fd5b506100e76100e2366004610afc565b610254565b005b3480156100f557600080fd5b50610109610104366004610b26565b6103cc565b6040519081526020015b60405180910390f35b34801561012857600080fd5b506100e7610137366004610b41565b610457565b34801561014857600080fd5b5061010960065481565b34801561015e57600080fd5b50610109600b5481565b34801561017457600080fd5b5061010960075481565b34801561018a57600080fd5b506101ba610199366004610b26565b60056020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610113565b6100e7610479565b3480156101e957600080fd5b5061010960095481565b3480156101ff57600080fd5b5061010960085481565b34801561021557600080fd5b506100e76106e4565b34801561022a57600080fd5b506100e7610239366004610b63565b6106ef565b34801561024a57600080fd5b50610109600a5481565b6000546001600160a01b0316331461026b57600080fd5b6001600160a01b0382166000908152600560205260409020541561029257610292826107f3565b6000811180156102b857506001600160a01b038216600090815260056020526040902054155b1561031e57600280546001600160a01b0384166000818152600360205260408120839055600183018455929092527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319169091179055610351565b8015801561034357506001600160a01b03821660009081526005602052604090205415155b15610351576103518261091f565b6001600160a01b03821660009081526005602052604090205460065461038291839161037c91610a34565b90610a47565b6006556001600160a01b03821660009081526005602052604090208190556103a981610a53565b6001600160a01b0390921660009081526005602052604090206001019190915550565b6001600160a01b03811660009081526005602052604081205481036103f357506000919050565b6001600160a01b03821660009081526005602052604081205461041590610a53565b6001600160a01b038416600090815260056020526040902060010154909150808211610445575060009392505050565b61044f8282610a34565b949350505050565b6000546001600160a01b0316331461046e57600080fd5b600a91909155600b55565b6000546001600160a01b0316331461049057600080fd5b6040516370a0823160e01b815230600482015260009073e9e7cea3dedca5984780bafc599bd69add087d56906370a0823190602401602060405180830381865afa1580156104e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105069190610b7c565b604080516002808252606082018352929350600092909160208301908036833701905050905073bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c8160008151811061055457610554610b95565b60200260200101906001600160a01b031690816001600160a01b03168152505073e9e7cea3dedca5984780bafc599bd69add087d568160018151811061059c5761059c610b95565b6001600160a01b03928316602091820292909201015260015460405163b6f9de9560e01b815291169063b6f9de959034906105e290600a90869030904290600401610bab565b6000604051808303818588803b1580156105fb57600080fd5b505af115801561060f573d6000803e3d6000fd5b50506040516370a0823160e01b815230600482015260009350610696925085915073e9e7cea3dedca5984780bafc599bd69add087d56906370a0823190602401602060405180830381865afa15801561066c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106909190610b7c565b90610a34565b6007549091506106a69082610a47565b6007556006546106dc906106d3906106cd6ec097ce7bc90715b34b9f100000000085610a83565b90610a8f565b60095490610a47565b600955505050565b6106ed336107f3565b565b6000546001600160a01b0316331461070657600080fd5b6002546000819003610716575050565b6000805a905060005b848310801561072d57508381105b156107ec5783600c5410610741576000600c555b6107736002600c548154811061075957610759610b95565b6000918252602090912001546001600160a01b0316610a9b565b156107aa576107aa6002600c548154811061079057610790610b95565b6000918252602090912001546001600160a01b03166107f3565b6107bf6107b85a8490610a34565b8490610a47565b92505a600c805491935060006107d483610c2b565b919050555080806107e490610c2b565b91505061071f565b5050505050565b6001600160a01b03811660009081526005602052604081205490036108155750565b6000610820826103cc565b9050801561091b576008546108359082610a47565b60085560405163a9059cbb60e01b81526001600160a01b03831660048201526024810182905273e9e7cea3dedca5984780bafc599bd69add087d569063a9059cbb906044016020604051808303816000875af1158015610899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bd9190610c44565b506001600160a01b038216600090815260046020908152604080832042905560059091529020600201546108f19082610a47565b6001600160a01b03831660009081526005602052604090206002810191909155546103a990610a53565b5050565b6002805461092f90600190610c66565b8154811061093f5761093f610b95565b60009182526020808320909101546001600160a01b038481168452600390925260409092205460028054929093169291811061097d5761097d610b95565b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559183168152600391829052604081205460028054919392916109c990600190610c66565b815481106109d9576109d9610b95565b60009182526020808320909101546001600160a01b031683528201929092526040019020556002805480610a0f57610a0f610c7d565b600082815260209020810160001990810180546001600160a01b031916905501905550565b6000610a408284610c66565b9392505050565b6000610a408284610c93565b6000610a7d6ec097ce7bc90715b34b9f10000000006106cd60095485610a8390919063ffffffff16565b92915050565b6000610a408284610cab565b6000610a408284610cca565b600a546001600160a01b03821660009081526004602052604081205490914291610ac59190610c93565b108015610a7d5750600b54610ad9836103cc565b1192915050565b80356001600160a01b0381168114610af757600080fd5b919050565b60008060408385031215610b0f57600080fd5b610b1883610ae0565b946020939093013593505050565b600060208284031215610b3857600080fd5b610a4082610ae0565b60008060408385031215610b5457600080fd5b50508035926020909101359150565b600060208284031215610b7557600080fd5b5035919050565b600060208284031215610b8e57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060808201868352602060808185015281875180845260a086019150828901935060005b81811015610bf55784516001600160a01b031683529383019391830191600101610bd0565b50506001600160a01b039690961660408501525050506060015292915050565b634e487b7160e01b600052601160045260246000fd5b600060018201610c3d57610c3d610c15565b5060010190565b600060208284031215610c5657600080fd5b81518015158114610a4057600080fd5b600082821015610c7857610c78610c15565b500390565b634e487b7160e01b600052603160045260246000fd5b60008219821115610ca657610ca6610c15565b500190565b6000816000190483118215151615610cc557610cc5610c15565b500290565b600082610ce757634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212208e1efd370bbc6e564041543dfa49b76657f34d7af452c61b3f0381594d4d8d6564736f6c634300080d0033ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122079475e6267ce8e8675384957d65df3350ebb9a8cf60ff51d404591d6c243125764736f6c634300080d0033";

    public static final String FUNC_MASK = "MASK";

    public static final String FUNC_WBNB = "WBNB";

    public static final String FUNC_WATT = "Watt";

    public static final String FUNC__MAXTXAMOUNT = "_maxTxAmount";

    public static final String FUNC_ACCEPTOWNERSHIP = "acceptOwnership";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_APPROVEMAX = "approveMax";

    public static final String FUNC_AUTHORIZE = "authorize";

    public static final String FUNC_AUTOBUYBACKENABLED = "autoBuybackEnabled";

    public static final String FUNC_AUTOLIQUIDITYRECEIVER = "autoLiquidityReceiver";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BUYBACKFEERECEIVER = "buybackFeeReceiver";

    public static final String FUNC_CLEARBUYBACKMULTIPLIER = "clearBuybackMultiplier";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_DISTRIBUTORADDRESS = "distributorAddress";

    public static final String FUNC_GETCIRCULATINGSUPPLY = "getCirculatingSupply";

    public static final String FUNC_GETMULTIPLIEDFEE = "getMultipliedFee";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_GETTOTALFEE = "getTotalFee";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_ISAUTHORIZED = "isAuthorized";

    public static final String FUNC_ISFIRSTPURCHASE = "isFirstPurchase";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_LAUNCH = "launch";

    public static final String FUNC_LAUNCHEDAT = "launchedAt";

    public static final String FUNC_LAUNCHEDATTIMESTAMP = "launchedAtTimestamp";

    public static final String FUNC_MARKETINGFEERECEIVER = "marketingFeeReceiver";

    public static final String FUNC_MAXBUYAMOUNT = "maxBuyAmount";

    public static final String FUNC_MAXSELLAMOUNT = "maxSellAmount";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_NOMINATEPOTENTIALOWNER = "nominatePotentialOwner";

    public static final String FUNC_PAIR = "pair";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_ROUTER = "router";

    public static final String FUNC_SETAUTOBUYBACKSETTINGS = "setAutoBuybackSettings";

    public static final String FUNC_SETBUYBACKMULTIPLIERSETTINGS = "setBuybackMultiplierSettings";

    public static final String FUNC_SETDISTRIBUTIONCRITERIA = "setDistributionCriteria";

    public static final String FUNC_SETDISTRIBUTORSETTINGS = "setDistributorSettings";

    public static final String FUNC_SETFEERECEIVERS = "setFeeReceivers";

    public static final String FUNC_SETFEES = "setFees";

    public static final String FUNC_SETISAMLBLACKLISTED = "setIsAMLBlacklisted";

    public static final String FUNC_SETISDIVIDENDEXEMPT = "setIsDividendExempt";

    public static final String FUNC_SETISFEEEXEMPT = "setIsFeeExempt";

    public static final String FUNC_SETISTXLIMITEXEMPT = "setIsTxLimitExempt";

    public static final String FUNC_SETNDBREFERRAL = "setNDBReferral";

    public static final String FUNC_SETSWAPBACKSETTINGS = "setSwapBackSettings";

    public static final String FUNC_SETTARGETLIQUIDITY = "setTargetLiquidity";

    public static final String FUNC_SETTREASURYWALLET = "setTreasuryWallet";

    public static final String FUNC_SETTXLIMIT = "setTxLimit";

    public static final String FUNC_SWAPENABLED = "swapEnabled";

    public static final String FUNC_SWAPTHRESHOLD = "swapThreshold";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRIGGERZEUSBUYBACK = "triggerZeusBuyback";

    public static final String FUNC_UNAUTHORIZE = "unauthorize";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event AUTHORIZE_EVENT = new Event("Authorize", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event AUTOLIQUIFY_EVENT = new Event("AutoLiquify", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event BUYBACKMULTIPLIERACTIVE_EVENT = new Event("BuybackMultiplierActive", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event CLEARBUYBACKMULTIPLIER_EVENT = new Event("ClearBuybackMultiplier", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event LAUNCH_EVENT = new Event("Launch", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERNOMINATED_EVENT = new Event("OwnerNominated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event SETAUTOBUYBACKSETTINGS_EVENT = new Event("SetAutoBuybackSettings", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SETBUYBACKMULTIPLIERSETTINGS_EVENT = new Event("SetBuybackMultiplierSettings", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SETDISTRIBUTORSETTINGS_EVENT = new Event("SetDistributorSettings", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event SETFEERECEIVERS_EVENT = new Event("SetFeeReceivers", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SETFEES_EVENT = new Event("SetFees", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SETISAMLBLACKLISTED_EVENT = new Event("SetIsAMLBlacklisted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event SETISDIVIDENDEXEMPT_EVENT = new Event("SetIsDividendExempt", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event SETISFEEEXEMPT_EVENT = new Event("SetIsFeeExempt", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event SETISTXLIMITEXEMPT_EVENT = new Event("SetIsTxLimitExempt", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event SETNDBREFERRAL_EVENT = new Event("SetNDBReferral", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event SETSWAPBACKSETTINGS_EVENT = new Event("SetSwapBackSettings", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SETTARGETLIQUIDITY_EVENT = new Event("SetTargetLiquidity", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SETTREASURYWALLET_EVENT = new Event("SetTreasuryWallet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event SETTXLIMIT_EVENT = new Event("SetTxLimit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRIGGERZEUSBUYBACK_EVENT = new Event("TriggerZeusBuyback", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
    ;

    @Deprecated
    protected NDBcoinV4(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected NDBcoinV4(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected NDBcoinV4(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected NDBcoinV4(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<AuthorizeEventResponse> getAuthorizeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(AUTHORIZE_EVENT, transactionReceipt);
        ArrayList<AuthorizeEventResponse> responses = new ArrayList<AuthorizeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AuthorizeEventResponse typedResponse = new AuthorizeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.adr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.status = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AuthorizeEventResponse> authorizeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AuthorizeEventResponse>() {
            @Override
            public AuthorizeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(AUTHORIZE_EVENT, log);
                AuthorizeEventResponse typedResponse = new AuthorizeEventResponse();
                typedResponse.log = log;
                typedResponse.adr = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.status = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AuthorizeEventResponse> authorizeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AUTHORIZE_EVENT));
        return authorizeEventFlowable(filter);
    }

    public List<AutoLiquifyEventResponse> getAutoLiquifyEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(AUTOLIQUIFY_EVENT, transactionReceipt);
        ArrayList<AutoLiquifyEventResponse> responses = new ArrayList<AutoLiquifyEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AutoLiquifyEventResponse typedResponse = new AutoLiquifyEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.amountBNB = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amountNDB = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AutoLiquifyEventResponse> autoLiquifyEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AutoLiquifyEventResponse>() {
            @Override
            public AutoLiquifyEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(AUTOLIQUIFY_EVENT, log);
                AutoLiquifyEventResponse typedResponse = new AutoLiquifyEventResponse();
                typedResponse.log = log;
                typedResponse.amountBNB = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amountNDB = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AutoLiquifyEventResponse> autoLiquifyEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AUTOLIQUIFY_EVENT));
        return autoLiquifyEventFlowable(filter);
    }

    public List<BuybackMultiplierActiveEventResponse> getBuybackMultiplierActiveEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BUYBACKMULTIPLIERACTIVE_EVENT, transactionReceipt);
        ArrayList<BuybackMultiplierActiveEventResponse> responses = new ArrayList<BuybackMultiplierActiveEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BuybackMultiplierActiveEventResponse typedResponse = new BuybackMultiplierActiveEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.duration = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BuybackMultiplierActiveEventResponse> buybackMultiplierActiveEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BuybackMultiplierActiveEventResponse>() {
            @Override
            public BuybackMultiplierActiveEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BUYBACKMULTIPLIERACTIVE_EVENT, log);
                BuybackMultiplierActiveEventResponse typedResponse = new BuybackMultiplierActiveEventResponse();
                typedResponse.log = log;
                typedResponse.duration = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BuybackMultiplierActiveEventResponse> buybackMultiplierActiveEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BUYBACKMULTIPLIERACTIVE_EVENT));
        return buybackMultiplierActiveEventFlowable(filter);
    }

    public List<ClearBuybackMultiplierEventResponse> getClearBuybackMultiplierEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CLEARBUYBACKMULTIPLIER_EVENT, transactionReceipt);
        ArrayList<ClearBuybackMultiplierEventResponse> responses = new ArrayList<ClearBuybackMultiplierEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ClearBuybackMultiplierEventResponse typedResponse = new ClearBuybackMultiplierEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.buybackMultiplierTriggeredAt = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ClearBuybackMultiplierEventResponse> clearBuybackMultiplierEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ClearBuybackMultiplierEventResponse>() {
            @Override
            public ClearBuybackMultiplierEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CLEARBUYBACKMULTIPLIER_EVENT, log);
                ClearBuybackMultiplierEventResponse typedResponse = new ClearBuybackMultiplierEventResponse();
                typedResponse.log = log;
                typedResponse.buybackMultiplierTriggeredAt = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ClearBuybackMultiplierEventResponse> clearBuybackMultiplierEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CLEARBUYBACKMULTIPLIER_EVENT));
        return clearBuybackMultiplierEventFlowable(filter);
    }

    public List<LaunchEventResponse> getLaunchEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LAUNCH_EVENT, transactionReceipt);
        ArrayList<LaunchEventResponse> responses = new ArrayList<LaunchEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LaunchEventResponse typedResponse = new LaunchEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.launchedAt = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.launchedAtTimestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LaunchEventResponse> launchEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LaunchEventResponse>() {
            @Override
            public LaunchEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LAUNCH_EVENT, log);
                LaunchEventResponse typedResponse = new LaunchEventResponse();
                typedResponse.log = log;
                typedResponse.launchedAt = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.launchedAtTimestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LaunchEventResponse> launchEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LAUNCH_EVENT));
        return launchEventFlowable(filter);
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.prevOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnerChangedEventResponse> ownerChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnerChangedEventResponse>() {
            @Override
            public OwnerChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERCHANGED_EVENT, log);
                OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
                typedResponse.log = log;
                typedResponse.prevOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnerChangedEventResponse> ownerChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERCHANGED_EVENT));
        return ownerChangedEventFlowable(filter);
    }

    public List<OwnerNominatedEventResponse> getOwnerNominatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERNOMINATED_EVENT, transactionReceipt);
        ArrayList<OwnerNominatedEventResponse> responses = new ArrayList<OwnerNominatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerNominatedEventResponse typedResponse = new OwnerNominatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnerNominatedEventResponse> ownerNominatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnerNominatedEventResponse>() {
            @Override
            public OwnerNominatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERNOMINATED_EVENT, log);
                OwnerNominatedEventResponse typedResponse = new OwnerNominatedEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnerNominatedEventResponse> ownerNominatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERNOMINATED_EVENT));
        return ownerNominatedEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.prevOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.prevOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<SetAutoBuybackSettingsEventResponse> getSetAutoBuybackSettingsEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETAUTOBUYBACKSETTINGS_EVENT, transactionReceipt);
        ArrayList<SetAutoBuybackSettingsEventResponse> responses = new ArrayList<SetAutoBuybackSettingsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetAutoBuybackSettingsEventResponse typedResponse = new SetAutoBuybackSettingsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._enabled = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._cap = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._period = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetAutoBuybackSettingsEventResponse> setAutoBuybackSettingsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetAutoBuybackSettingsEventResponse>() {
            @Override
            public SetAutoBuybackSettingsEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETAUTOBUYBACKSETTINGS_EVENT, log);
                SetAutoBuybackSettingsEventResponse typedResponse = new SetAutoBuybackSettingsEventResponse();
                typedResponse.log = log;
                typedResponse._enabled = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._cap = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._period = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetAutoBuybackSettingsEventResponse> setAutoBuybackSettingsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETAUTOBUYBACKSETTINGS_EVENT));
        return setAutoBuybackSettingsEventFlowable(filter);
    }

    public List<SetBuybackMultiplierSettingsEventResponse> getSetBuybackMultiplierSettingsEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETBUYBACKMULTIPLIERSETTINGS_EVENT, transactionReceipt);
        ArrayList<SetBuybackMultiplierSettingsEventResponse> responses = new ArrayList<SetBuybackMultiplierSettingsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetBuybackMultiplierSettingsEventResponse typedResponse = new SetBuybackMultiplierSettingsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.numerator = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.denominator = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.length = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetBuybackMultiplierSettingsEventResponse> setBuybackMultiplierSettingsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetBuybackMultiplierSettingsEventResponse>() {
            @Override
            public SetBuybackMultiplierSettingsEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETBUYBACKMULTIPLIERSETTINGS_EVENT, log);
                SetBuybackMultiplierSettingsEventResponse typedResponse = new SetBuybackMultiplierSettingsEventResponse();
                typedResponse.log = log;
                typedResponse.numerator = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.denominator = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.length = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetBuybackMultiplierSettingsEventResponse> setBuybackMultiplierSettingsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETBUYBACKMULTIPLIERSETTINGS_EVENT));
        return setBuybackMultiplierSettingsEventFlowable(filter);
    }

    public List<SetDistributorSettingsEventResponse> getSetDistributorSettingsEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETDISTRIBUTORSETTINGS_EVENT, transactionReceipt);
        ArrayList<SetDistributorSettingsEventResponse> responses = new ArrayList<SetDistributorSettingsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetDistributorSettingsEventResponse typedResponse = new SetDistributorSettingsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.gas = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetDistributorSettingsEventResponse> setDistributorSettingsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetDistributorSettingsEventResponse>() {
            @Override
            public SetDistributorSettingsEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETDISTRIBUTORSETTINGS_EVENT, log);
                SetDistributorSettingsEventResponse typedResponse = new SetDistributorSettingsEventResponse();
                typedResponse.log = log;
                typedResponse.gas = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetDistributorSettingsEventResponse> setDistributorSettingsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETDISTRIBUTORSETTINGS_EVENT));
        return setDistributorSettingsEventFlowable(filter);
    }

    public List<SetFeeReceiversEventResponse> getSetFeeReceiversEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETFEERECEIVERS_EVENT, transactionReceipt);
        ArrayList<SetFeeReceiversEventResponse> responses = new ArrayList<SetFeeReceiversEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetFeeReceiversEventResponse typedResponse = new SetFeeReceiversEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._autoLiquidityReceiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._marketingFeeReceiver = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._buybackFeeReceiver = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetFeeReceiversEventResponse> setFeeReceiversEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetFeeReceiversEventResponse>() {
            @Override
            public SetFeeReceiversEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETFEERECEIVERS_EVENT, log);
                SetFeeReceiversEventResponse typedResponse = new SetFeeReceiversEventResponse();
                typedResponse.log = log;
                typedResponse._autoLiquidityReceiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._marketingFeeReceiver = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._buybackFeeReceiver = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetFeeReceiversEventResponse> setFeeReceiversEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETFEERECEIVERS_EVENT));
        return setFeeReceiversEventFlowable(filter);
    }

    public List<SetFeesEventResponse> getSetFeesEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETFEES_EVENT, transactionReceipt);
        ArrayList<SetFeesEventResponse> responses = new ArrayList<SetFeesEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetFeesEventResponse typedResponse = new SetFeesEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._liquidityFee = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._buybackFee = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._reflectionFee = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._marketingFee = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._feeDenominator = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetFeesEventResponse> setFeesEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetFeesEventResponse>() {
            @Override
            public SetFeesEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETFEES_EVENT, log);
                SetFeesEventResponse typedResponse = new SetFeesEventResponse();
                typedResponse.log = log;
                typedResponse._liquidityFee = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._buybackFee = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._reflectionFee = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._marketingFee = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse._feeDenominator = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetFeesEventResponse> setFeesEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETFEES_EVENT));
        return setFeesEventFlowable(filter);
    }

    public List<SetIsAMLBlacklistedEventResponse> getSetIsAMLBlacklistedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETISAMLBLACKLISTED_EVENT, transactionReceipt);
        ArrayList<SetIsAMLBlacklistedEventResponse> responses = new ArrayList<SetIsAMLBlacklistedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetIsAMLBlacklistedEventResponse typedResponse = new SetIsAMLBlacklistedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.holder = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.status = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetIsAMLBlacklistedEventResponse> setIsAMLBlacklistedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetIsAMLBlacklistedEventResponse>() {
            @Override
            public SetIsAMLBlacklistedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETISAMLBLACKLISTED_EVENT, log);
                SetIsAMLBlacklistedEventResponse typedResponse = new SetIsAMLBlacklistedEventResponse();
                typedResponse.log = log;
                typedResponse.holder = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.status = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetIsAMLBlacklistedEventResponse> setIsAMLBlacklistedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETISAMLBLACKLISTED_EVENT));
        return setIsAMLBlacklistedEventFlowable(filter);
    }

    public List<SetIsDividendExemptEventResponse> getSetIsDividendExemptEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETISDIVIDENDEXEMPT_EVENT, transactionReceipt);
        ArrayList<SetIsDividendExemptEventResponse> responses = new ArrayList<SetIsDividendExemptEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetIsDividendExemptEventResponse typedResponse = new SetIsDividendExemptEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.holder = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.exempt = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetIsDividendExemptEventResponse> setIsDividendExemptEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetIsDividendExemptEventResponse>() {
            @Override
            public SetIsDividendExemptEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETISDIVIDENDEXEMPT_EVENT, log);
                SetIsDividendExemptEventResponse typedResponse = new SetIsDividendExemptEventResponse();
                typedResponse.log = log;
                typedResponse.holder = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.exempt = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetIsDividendExemptEventResponse> setIsDividendExemptEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETISDIVIDENDEXEMPT_EVENT));
        return setIsDividendExemptEventFlowable(filter);
    }

    public List<SetIsFeeExemptEventResponse> getSetIsFeeExemptEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETISFEEEXEMPT_EVENT, transactionReceipt);
        ArrayList<SetIsFeeExemptEventResponse> responses = new ArrayList<SetIsFeeExemptEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetIsFeeExemptEventResponse typedResponse = new SetIsFeeExemptEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.holder = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.exempt = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetIsFeeExemptEventResponse> setIsFeeExemptEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetIsFeeExemptEventResponse>() {
            @Override
            public SetIsFeeExemptEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETISFEEEXEMPT_EVENT, log);
                SetIsFeeExemptEventResponse typedResponse = new SetIsFeeExemptEventResponse();
                typedResponse.log = log;
                typedResponse.holder = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.exempt = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetIsFeeExemptEventResponse> setIsFeeExemptEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETISFEEEXEMPT_EVENT));
        return setIsFeeExemptEventFlowable(filter);
    }

    public List<SetIsTxLimitExemptEventResponse> getSetIsTxLimitExemptEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETISTXLIMITEXEMPT_EVENT, transactionReceipt);
        ArrayList<SetIsTxLimitExemptEventResponse> responses = new ArrayList<SetIsTxLimitExemptEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetIsTxLimitExemptEventResponse typedResponse = new SetIsTxLimitExemptEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.holder = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.exempt = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetIsTxLimitExemptEventResponse> setIsTxLimitExemptEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetIsTxLimitExemptEventResponse>() {
            @Override
            public SetIsTxLimitExemptEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETISTXLIMITEXEMPT_EVENT, log);
                SetIsTxLimitExemptEventResponse typedResponse = new SetIsTxLimitExemptEventResponse();
                typedResponse.log = log;
                typedResponse.holder = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.exempt = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetIsTxLimitExemptEventResponse> setIsTxLimitExemptEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETISTXLIMITEXEMPT_EVENT));
        return setIsTxLimitExemptEventFlowable(filter);
    }

    public List<SetNDBReferralEventResponse> getSetNDBReferralEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETNDBREFERRAL_EVENT, transactionReceipt);
        ArrayList<SetNDBReferralEventResponse> responses = new ArrayList<SetNDBReferralEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetNDBReferralEventResponse typedResponse = new SetNDBReferralEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.NDBReferral = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetNDBReferralEventResponse> setNDBReferralEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetNDBReferralEventResponse>() {
            @Override
            public SetNDBReferralEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETNDBREFERRAL_EVENT, log);
                SetNDBReferralEventResponse typedResponse = new SetNDBReferralEventResponse();
                typedResponse.log = log;
                typedResponse.NDBReferral = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetNDBReferralEventResponse> setNDBReferralEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETNDBREFERRAL_EVENT));
        return setNDBReferralEventFlowable(filter);
    }

    public List<SetSwapBackSettingsEventResponse> getSetSwapBackSettingsEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETSWAPBACKSETTINGS_EVENT, transactionReceipt);
        ArrayList<SetSwapBackSettingsEventResponse> responses = new ArrayList<SetSwapBackSettingsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetSwapBackSettingsEventResponse typedResponse = new SetSwapBackSettingsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._enabled = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetSwapBackSettingsEventResponse> setSwapBackSettingsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetSwapBackSettingsEventResponse>() {
            @Override
            public SetSwapBackSettingsEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETSWAPBACKSETTINGS_EVENT, log);
                SetSwapBackSettingsEventResponse typedResponse = new SetSwapBackSettingsEventResponse();
                typedResponse.log = log;
                typedResponse._enabled = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetSwapBackSettingsEventResponse> setSwapBackSettingsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETSWAPBACKSETTINGS_EVENT));
        return setSwapBackSettingsEventFlowable(filter);
    }

    public List<SetTargetLiquidityEventResponse> getSetTargetLiquidityEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETTARGETLIQUIDITY_EVENT, transactionReceipt);
        ArrayList<SetTargetLiquidityEventResponse> responses = new ArrayList<SetTargetLiquidityEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetTargetLiquidityEventResponse typedResponse = new SetTargetLiquidityEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._target = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._denominator = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetTargetLiquidityEventResponse> setTargetLiquidityEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetTargetLiquidityEventResponse>() {
            @Override
            public SetTargetLiquidityEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETTARGETLIQUIDITY_EVENT, log);
                SetTargetLiquidityEventResponse typedResponse = new SetTargetLiquidityEventResponse();
                typedResponse.log = log;
                typedResponse._target = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._denominator = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetTargetLiquidityEventResponse> setTargetLiquidityEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTARGETLIQUIDITY_EVENT));
        return setTargetLiquidityEventFlowable(filter);
    }

    public List<SetTreasuryWalletEventResponse> getSetTreasuryWalletEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETTREASURYWALLET_EVENT, transactionReceipt);
        ArrayList<SetTreasuryWalletEventResponse> responses = new ArrayList<SetTreasuryWalletEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetTreasuryWalletEventResponse typedResponse = new SetTreasuryWalletEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._wallet = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._status = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetTreasuryWalletEventResponse> setTreasuryWalletEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetTreasuryWalletEventResponse>() {
            @Override
            public SetTreasuryWalletEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETTREASURYWALLET_EVENT, log);
                SetTreasuryWalletEventResponse typedResponse = new SetTreasuryWalletEventResponse();
                typedResponse.log = log;
                typedResponse._wallet = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._status = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetTreasuryWalletEventResponse> setTreasuryWalletEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTREASURYWALLET_EVENT));
        return setTreasuryWalletEventFlowable(filter);
    }

    public List<SetTxLimitEventResponse> getSetTxLimitEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETTXLIMIT_EVENT, transactionReceipt);
        ArrayList<SetTxLimitEventResponse> responses = new ArrayList<SetTxLimitEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetTxLimitEventResponse typedResponse = new SetTxLimitEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetTxLimitEventResponse> setTxLimitEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetTxLimitEventResponse>() {
            @Override
            public SetTxLimitEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETTXLIMIT_EVENT, log);
                SetTxLimitEventResponse typedResponse = new SetTxLimitEventResponse();
                typedResponse.log = log;
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetTxLimitEventResponse> setTxLimitEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTXLIMIT_EVENT));
        return setTxLimitEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public List<TriggerZeusBuybackEventResponse> getTriggerZeusBuybackEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRIGGERZEUSBUYBACK_EVENT, transactionReceipt);
        ArrayList<TriggerZeusBuybackEventResponse> responses = new ArrayList<TriggerZeusBuybackEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TriggerZeusBuybackEventResponse typedResponse = new TriggerZeusBuybackEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.triggerBuybackMultiplier = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TriggerZeusBuybackEventResponse> triggerZeusBuybackEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TriggerZeusBuybackEventResponse>() {
            @Override
            public TriggerZeusBuybackEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRIGGERZEUSBUYBACK_EVENT, log);
                TriggerZeusBuybackEventResponse typedResponse = new TriggerZeusBuybackEventResponse();
                typedResponse.log = log;
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.triggerBuybackMultiplier = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TriggerZeusBuybackEventResponse> triggerZeusBuybackEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRIGGERZEUSBUYBACK_EVENT));
        return triggerZeusBuybackEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> MASK() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> WBNB() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_WBNB, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> Watt() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_WATT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> _maxTxAmount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__MAXTXAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> acceptOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ACCEPTOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> allowance(String holder, String spender) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, holder), 
                new org.web3j.abi.datatypes.Address(160, spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String spender, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> approveMax(String spender) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVEMAX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> authorize(String adr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_AUTHORIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, adr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> autoBuybackEnabled() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_AUTOBUYBACKENABLED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> autoLiquidityReceiver() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_AUTOLIQUIDITYRECEIVER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> buybackFeeReceiver() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BUYBACKFEERECEIVER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> clearBuybackMultiplier() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CLEARBUYBACKMULTIPLIER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> decimals() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> distributorAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DISTRIBUTORADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getCirculatingSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCIRCULATINGSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getMultipliedFee() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETMULTIPLIEDFEE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getOwner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getTotalFee(Boolean selling) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTOTALFEE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(selling)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(String _dexRouter, String _marketing, String _buyback, String _votlamond) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _dexRouter), 
                new org.web3j.abi.datatypes.Address(160, _marketing), 
                new org.web3j.abi.datatypes.Address(160, _buyback), 
                new org.web3j.abi.datatypes.Address(160, _votlamond)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isAuthorized(String adr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAUTHORIZED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, adr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isFirstPurchase(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISFIRSTPURCHASE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isOwner(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> launch() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_LAUNCH, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> launchedAt() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LAUNCHEDAT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> launchedAtTimestamp() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LAUNCHEDATTIMESTAMP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> marketingFeeReceiver() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MARKETINGFEERECEIVER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> maxBuyAmount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAXBUYAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> maxSellAmount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAXSELLAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> nominatePotentialOwner(String _owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_NOMINATEPOTENTIALOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> pair() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PAIR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> router() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ROUTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setAutoBuybackSettings(Boolean _enabled, BigInteger _cap, BigInteger _amount, BigInteger _period) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAUTOBUYBACKSETTINGS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(_enabled), 
                new org.web3j.abi.datatypes.generated.Uint256(_cap), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount), 
                new org.web3j.abi.datatypes.generated.Uint256(_period)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setBuybackMultiplierSettings(BigInteger numerator, BigInteger denominator, BigInteger length) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETBUYBACKMULTIPLIERSETTINGS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(numerator), 
                new org.web3j.abi.datatypes.generated.Uint256(denominator), 
                new org.web3j.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setDistributionCriteria(BigInteger _minPeriod, BigInteger _minDistribution) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETDISTRIBUTIONCRITERIA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_minPeriod), 
                new org.web3j.abi.datatypes.generated.Uint256(_minDistribution)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setDistributorSettings(BigInteger gas) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETDISTRIBUTORSETTINGS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gas)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setFeeReceivers(String _autoLiquidityReceiver, String _marketingFeeReceiver, String _buybackFeeReceiver) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETFEERECEIVERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _autoLiquidityReceiver), 
                new org.web3j.abi.datatypes.Address(160, _marketingFeeReceiver), 
                new org.web3j.abi.datatypes.Address(160, _buybackFeeReceiver)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setFees(BigInteger _liquidityFee, BigInteger _buybackFee, BigInteger _reflectionFee, BigInteger _marketingFee, BigInteger _feeDenominator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETFEES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_liquidityFee), 
                new org.web3j.abi.datatypes.generated.Uint256(_buybackFee), 
                new org.web3j.abi.datatypes.generated.Uint256(_reflectionFee), 
                new org.web3j.abi.datatypes.generated.Uint256(_marketingFee), 
                new org.web3j.abi.datatypes.generated.Uint256(_feeDenominator)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setIsAMLBlacklisted(String holder, Boolean status) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETISAMLBLACKLISTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, holder), 
                new org.web3j.abi.datatypes.Bool(status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setIsDividendExempt(String holder, Boolean exempt) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETISDIVIDENDEXEMPT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, holder), 
                new org.web3j.abi.datatypes.Bool(exempt)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setIsFeeExempt(String holder, Boolean exempt) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETISFEEEXEMPT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, holder), 
                new org.web3j.abi.datatypes.Bool(exempt)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setIsTxLimitExempt(String holder, Boolean exempt) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETISTXLIMITEXEMPT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, holder), 
                new org.web3j.abi.datatypes.Bool(exempt)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setNDBReferral(String _NDBReferral) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETNDBREFERRAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _NDBReferral)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setSwapBackSettings(Boolean _enabled, BigInteger _amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETSWAPBACKSETTINGS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(_enabled), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTargetLiquidity(BigInteger _target, BigInteger _denominator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETTARGETLIQUIDITY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_target), 
                new org.web3j.abi.datatypes.generated.Uint256(_denominator)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTreasuryWallet(String wallet, Boolean status) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETTREASURYWALLET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, wallet), 
                new org.web3j.abi.datatypes.Bool(status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTxLimit(BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETTXLIMIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> swapEnabled() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SWAPENABLED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> swapThreshold() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SWAPTHRESHOLD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String recipient, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, recipient), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String sender, String recipient, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, sender), 
                new org.web3j.abi.datatypes.Address(160, recipient), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> triggerZeusBuyback(BigInteger amount, Boolean triggerBuybackMultiplier) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRIGGERZEUSBUYBACK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.Bool(triggerBuybackMultiplier)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unauthorize(String adr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNAUTHORIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, adr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static NDBcoinV4 load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new NDBcoinV4(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static NDBcoinV4 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new NDBcoinV4(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static NDBcoinV4 load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new NDBcoinV4(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static NDBcoinV4 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new NDBcoinV4(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<NDBcoinV4> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(NDBcoinV4.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<NDBcoinV4> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(NDBcoinV4.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<NDBcoinV4> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(NDBcoinV4.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<NDBcoinV4> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(NDBcoinV4.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String spender;

        public BigInteger value;
    }

    public static class AuthorizeEventResponse extends BaseEventResponse {
        public String adr;

        public Boolean status;
    }

    public static class AutoLiquifyEventResponse extends BaseEventResponse {
        public BigInteger amountBNB;

        public BigInteger amountNDB;
    }

    public static class BuybackMultiplierActiveEventResponse extends BaseEventResponse {
        public BigInteger duration;
    }

    public static class ClearBuybackMultiplierEventResponse extends BaseEventResponse {
        public BigInteger buybackMultiplierTriggeredAt;
    }

    public static class LaunchEventResponse extends BaseEventResponse {
        public BigInteger launchedAt;

        public BigInteger launchedAtTimestamp;
    }

    public static class OwnerChangedEventResponse extends BaseEventResponse {
        public String prevOwner;

        public String newOwner;
    }

    public static class OwnerNominatedEventResponse extends BaseEventResponse {
        public String owner;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String prevOwner;

        public String newOwner;
    }

    public static class SetAutoBuybackSettingsEventResponse extends BaseEventResponse {
        public Boolean _enabled;

        public BigInteger _cap;

        public BigInteger _amount;

        public BigInteger _period;
    }

    public static class SetBuybackMultiplierSettingsEventResponse extends BaseEventResponse {
        public BigInteger numerator;

        public BigInteger denominator;

        public BigInteger length;
    }

    public static class SetDistributorSettingsEventResponse extends BaseEventResponse {
        public BigInteger gas;
    }

    public static class SetFeeReceiversEventResponse extends BaseEventResponse {
        public String _autoLiquidityReceiver;

        public String _marketingFeeReceiver;

        public String _buybackFeeReceiver;
    }

    public static class SetFeesEventResponse extends BaseEventResponse {
        public BigInteger _liquidityFee;

        public BigInteger _buybackFee;

        public BigInteger _reflectionFee;

        public BigInteger _marketingFee;

        public BigInteger _feeDenominator;
    }

    public static class SetIsAMLBlacklistedEventResponse extends BaseEventResponse {
        public String holder;

        public Boolean status;
    }

    public static class SetIsDividendExemptEventResponse extends BaseEventResponse {
        public String holder;

        public Boolean exempt;
    }

    public static class SetIsFeeExemptEventResponse extends BaseEventResponse {
        public String holder;

        public Boolean exempt;
    }

    public static class SetIsTxLimitExemptEventResponse extends BaseEventResponse {
        public String holder;

        public Boolean exempt;
    }

    public static class SetNDBReferralEventResponse extends BaseEventResponse {
        public String NDBReferral;
    }

    public static class SetSwapBackSettingsEventResponse extends BaseEventResponse {
        public Boolean _enabled;

        public BigInteger _amount;
    }

    public static class SetTargetLiquidityEventResponse extends BaseEventResponse {
        public BigInteger _target;

        public BigInteger _denominator;
    }

    public static class SetTreasuryWalletEventResponse extends BaseEventResponse {
        public String _wallet;

        public Boolean _status;
    }

    public static class SetTxLimitEventResponse extends BaseEventResponse {
        public BigInteger amount;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger value;
    }

    public static class TriggerZeusBuybackEventResponse extends BaseEventResponse {
        public BigInteger amount;

        public Boolean triggerBuybackMultiplier;
    }
}
